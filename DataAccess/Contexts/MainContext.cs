// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using DataAccess.Models;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DataAccess.Contexts
{
    public partial class MainContext : DbContext
    {
        public MainContext()
        {
        }

        public MainContext(DbContextOptions<MainContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Food> Foods { get; set; }
        public virtual DbSet<FoodCategory> FoodCategories { get; set; }
        public virtual DbSet<FoodType> FoodTypes { get; set; }
        public virtual DbSet<Meal> Meals { get; set; }
        public virtual DbSet<MealType> MealTypes { get; set; }
        public virtual DbSet<Relationship> Relationships { get; set; }
        public virtual DbSet<Token> Tokens { get; set; }
        public virtual DbSet<User> Users { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Food>(entity =>
            {
                entity.Property(e => e.CategoryId).HasComment("Bezmasé, S masem, Sladké...");

                entity.Property(e => e.TypeId).HasComment("Hlavní jídlo, polévka...");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Foods)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Foods_FoodCategories");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Foods)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Foods_FoodTypes");
            });

            modelBuilder.Entity<FoodCategory>(entity =>
            {
                entity.HasComment("Sladká, Bezmassá, s masem...");
            });

            modelBuilder.Entity<FoodType>(entity =>
            {
                entity.HasComment("Polévka, hlavní jídla...");
            });

            modelBuilder.Entity<Meal>(entity =>
            {
                entity.HasOne(d => d.CookedBy)
                    .WithMany(p => p.Meals)
                    .HasForeignKey(d => d.CookedById)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Meals_Users");

                entity.HasOne(d => d.Food)
                    .WithMany(p => p.Meals)
                    .HasForeignKey(d => d.FoodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Meals_Foods");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Meals)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Meals_MealTypes");
            });

            modelBuilder.Entity<MealType>(entity =>
            {
                entity.HasComment("Hlavní jídlo, krabička, ...");
            });

            modelBuilder.Entity<Relationship>(entity =>
            {
                entity.HasComment("Otec, Matka...");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Source)
                    .WithMany(p => p.RelationshipSources)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Relationships_Source");

                entity.HasOne(d => d.Target)
                    .WithMany(p => p.RelationshipTargets)
                    .HasForeignKey(d => d.TargetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Relationships_Target");
            });

            modelBuilder.Entity<Token>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Tokens)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tokens_Users");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}