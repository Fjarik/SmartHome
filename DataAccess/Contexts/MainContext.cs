// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using DataAccess.Models;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DataAccess.Contexts
{
    public partial class MainContext : DbContext
    {
		public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Food> Foods { get; set; }
        public virtual DbSet<FoodCategory> FoodCategories { get; set; }
        public virtual DbSet<FoodSide> FoodSides { get; set; }
        public virtual DbSet<Meal> Meals { get; set; }
        public virtual DbSet<MealCategory> MealCategories { get; set; }
        public virtual DbSet<Token> Tokens { get; set; }
        public virtual DbSet<User> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Category>(entity =>
            {
                entity.HasComment("Smažené, dušení, s masem, bez masa");

                entity.HasIndex(e => e.Name)
                    .HasName("UK_Categories_Name")
                    .IsUnique();
            });

            modelBuilder.Entity<Food>(entity =>
            {
                entity.HasIndex(e => e.Name)
                    .HasName("UK_Foods_Name")
                    .IsUnique();

                entity.Property(e => e.GlutenFree).HasDefaultValueSql("((1))");

                entity.Property(e => e.TypeId).HasComment("Hlavní jídlo, polévka...");
            });

            modelBuilder.Entity<FoodCategory>(entity =>
            {
                entity.HasKey(e => new { e.FoodId, e.CategoryId })
                    .HasName("PK_FoodCategories_1");

                entity.HasComment("");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.FoodCategories)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FoodCategories_Categories");

                entity.HasOne(d => d.Food)
                    .WithMany(p => p.FoodCategories)
                    .HasForeignKey(d => d.FoodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FoodCategories_Foods");
            });

            modelBuilder.Entity<FoodSide>(entity =>
            {
                entity.HasKey(e => new { e.FoodId, e.SideId });

                entity.HasComment("Defaultní přílohy k jídlům");

                entity.HasOne(d => d.Food)
                    .WithMany(p => p.FoodSideFoods)
                    .HasForeignKey(d => d.FoodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FoodSides_Foods");

                entity.HasOne(d => d.Side)
                    .WithMany(p => p.FoodSideSides)
                    .HasForeignKey(d => d.SideId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FoodSides_Side");
            });

            modelBuilder.Entity<Meal>(entity =>
            {
                entity.HasComment("Jídla v jednotlivé dny");

                entity.Property(e => e.TimeId)
                    .HasDefaultValueSql("((2))")
                    .HasComment("Snídaně, oběd, večeře");

                entity.HasOne(d => d.Food)
                    .WithMany(p => p.MealFoods)
                    .HasForeignKey(d => d.FoodId)
                    .HasConstraintName("FK_Meals_Foods");

                entity.HasOne(d => d.OriginalMeal)
                    .WithMany(p => p.InverseOriginalMeal)
                    .HasForeignKey(d => d.OriginalMealId)
                    .HasConstraintName("FK_Meals_OriginalMeals");

                entity.HasOne(d => d.Side)
                    .WithMany(p => p.MealSides)
                    .HasForeignKey(d => d.SideId)
                    .HasConstraintName("FK_Meals_SideDish");

                entity.HasOne(d => d.Soup)
                    .WithMany(p => p.MealSoups)
                    .HasForeignKey(d => d.SoupId)
                    .HasConstraintName("FK_Meals_Soup");
            });

            modelBuilder.Entity<MealCategory>(entity =>
            {
                entity.HasKey(e => new { e.MealId, e.CategoryId })
                    .HasName("PK_MealCategories_1");

                entity.HasComment("");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.MealCategories)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MealCategories_Categories");

                entity.HasOne(d => d.Meal)
                    .WithMany(p => p.MealCategories)
                    .HasForeignKey(d => d.MealId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MealCategories_Meals");
            });

            modelBuilder.Entity<Token>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Tokens)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tokens_Users");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasComment("");

                entity.HasIndex(e => e.Email)
                    .HasName("UK_Users_Email")
                    .IsUnique();

                entity.HasIndex(e => e.GoogleId)
                    .HasName("UK_Users_Google")
                    .IsUnique();

                entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email).IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}